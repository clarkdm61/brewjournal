package dmc.brewjournal.vaadin;

import java.io.Serializable;
import java.util.Collections;
import java.util.List;
import java.util.logging.Logger;

import org.vaadin.dialogs.ConfirmDialog;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

import dmc.brewjournal.entity.Batch;

public class BatchListView extends CustomComponent {

	/**
	 * Unable to use the ConfirmDialog.Listener as an anonymous inner class because it
	 * is missing the Serializable implementation. A request for fix has been made to the add-on author.
	 */
	private class DeleteConfirmDialogListener implements ConfirmDialog.Listener, Serializable {
		private static final long serialVersionUID = 1749112843580556004L;

		@Override
		public void onClose(ConfirmDialog dialog) {
			if (dialog.isConfirmed()) {
				doDelete();
			}
		}
		
	}

	
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout hLayoutActions;
	@AutoGenerated
	private Button btnDelete;
	@AutoGenerated
	private Button btnEdit;
	@AutoGenerated
	private Table tblBatchList;
	@AutoGenerated
	private Button btnNewBatch;
	@AutoGenerated
	private Label lblMyBrewJournal;

	private static final long serialVersionUID = -2636568370976334462L;
	private static Logger log = Logger.getLogger(BatchListView.class.getName());

	private Batch selectedBatch = null;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public BatchListView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// user code here
		addEventListenters();
		refreshBatchListTable();
	}

	/**
	 * Handle delete action once confirmed
	 */
	private void doDelete() {
		AppData.getBrewJournalService().delete(selectedBatch.getId());
		refreshBatchListTable();
	}

	/**
	 * Add event listeners, such as button click handlers.
	 */
	protected void addEventListenters() {
		
		// handle New Batch button click
		btnNewBatch.addListener(new Button.ClickListener() {
			private static final long serialVersionUID = 1390375932758670734L;
			@Override
			public void buttonClick(ClickEvent event) {
				// replace Application->MainWindow with BatchDetailView
				AppMain app = (AppMain) getApplication();
				Batch batch = new Batch();
				batch.setBatchName("batch name");
				app.getBatchDetailView().setBatchModel(batch );
				app.showDetailView();
//				app.getMainWindow().removeComponent(AppData.getBatchListView());
//				app.getMainWindow().addComponent(AppData.getBatchDetailView());
			}
		});
		
		// Edit
		btnEdit.addListener(new Button.ClickListener() {		
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO: Load then edit
				if (getSelectedBatch() != null) {
					AppMain app = AppData.getApplication();
					app.getBatchDetailView().setBatchModel(getSelectedBatch());
					app.showDetailView();
				}
			}
		});
		
		// Delete
		btnDelete.addListener(new Button.ClickListener() {		
			@Override
			public void buttonClick(ClickEvent event) {
				if (selectedBatch != null) {
					showConfirmDelete();
				}
			}
		});
		
		// allow selectable rows
		tblBatchList.setSelectable(true);
		tblBatchList.addListener(new Property.ValueChangeListener() {			
			@Override
			public void valueChange(ValueChangeEvent event) {
				Batch batch = (Batch)((Table) event.getProperty()).getValue();
				setSelectedBatch(batch);
			}
		});
	}
	
	/**
	 * Open the Confirm dialog to get user confirmation before deleting
	 */
	private void showConfirmDelete() {
		DeleteConfirmDialogListener callback = new DeleteConfirmDialogListener();
		ConfirmDialog.show(getParent().getWindow(), "Confirm Delete", "Delete record?", "Yes", "Cancel", callback);
	}

	/**
	 * Refresh the list of batches
	 * @return
	 */
	public void refreshBatchListTable() {
		List<Batch> batchList = AppData.getBrewJournalService().findAll();
		
		Collections.sort(batchList);
		
		// TODO: update table
		BatchListContainer container = new BatchListContainer(Batch.class, batchList);
		tblBatchList.setContainerDataSource(container);
		tblBatchList.setVisibleColumns(BatchListContainer.NATURAL_COL_ORDER);
		tblBatchList.setColumnHeaders(BatchListContainer.COL_HEADERS_ENGLISH);
		
		tblBatchList.setColumnWidth("batchNumber", 20);// TODO: needs to be a better way to specify property ID
		
	}

	public Batch getSelectedBatch() {
		return selectedBatch;
	}

	public void setSelectedBatch(Batch selectedBatch) {
		this.selectedBatch = selectedBatch;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// lblMyBrewJournal
		lblMyBrewJournal = new Label();
		lblMyBrewJournal.setImmediate(false);
		lblMyBrewJournal.setWidth("-1px");
		lblMyBrewJournal.setHeight("-1px");
		lblMyBrewJournal.setValue("My Brew Journal");
		mainLayout.addComponent(lblMyBrewJournal);
		mainLayout.setComponentAlignment(lblMyBrewJournal, new Alignment(20));
		
		// btnNewBatch
		btnNewBatch = new Button();
		btnNewBatch.setCaption("New Batch");
		btnNewBatch.setImmediate(true);
		btnNewBatch.setWidth("-1px");
		btnNewBatch.setHeight("-1px");
		mainLayout.addComponent(btnNewBatch);
		
		// tblBatchList
		tblBatchList = new Table();
		tblBatchList.setImmediate(false);
		tblBatchList.setWidth("100.0%");
		tblBatchList.setHeight("-1px");
		mainLayout.addComponent(tblBatchList);
		
		// hLayoutActions
		hLayoutActions = buildHLayoutActions();
		mainLayout.addComponent(hLayoutActions);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHLayoutActions() {
		// common part: create layout
		hLayoutActions = new HorizontalLayout();
		hLayoutActions.setImmediate(false);
		hLayoutActions.setWidth("-1px");
		hLayoutActions.setHeight("-1px");
		hLayoutActions.setMargin(true);
		hLayoutActions.setSpacing(true);
		
		// btnEdit
		btnEdit = new Button();
		btnEdit.setCaption("Edit");
		btnEdit.setImmediate(false);
		btnEdit.setWidth("-1px");
		btnEdit.setHeight("-1px");
		hLayoutActions.addComponent(btnEdit);
		
		// btnDelete
		btnDelete = new Button();
		btnDelete.setCaption("Delete");
		btnDelete.setImmediate(false);
		btnDelete.setWidth("-1px");
		btnDelete.setHeight("-1px");
		hLayoutActions.addComponent(btnDelete);
		
		return hLayoutActions;
	}

}
